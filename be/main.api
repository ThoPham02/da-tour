info (
	title:   "main api"
	author:  "thopb"
	email:   "thoahlgbg2002@gamil.com"
	version: "1.0"
)

// Model
type (
	Result {
		Code    int    `json:"code"`    //    Result code: 0 is success. Otherwise, getting an error
		Message string `json:"message"` // Result message: detail response code
	}
)

type (
	User {
		UserID   int64  `json:"userID"`
		FullName string `json:"fullName"`
		Email    string `json:"email"`
		Role     int64  `json:"role"`
		Status   int64  `json:"status"`
	}

	Tour {
		ID            int64       `json:"id"`
		Name          string      `json:"name"`
		Image         string      `json:"image"`
		Description   string      `json:"description"`
		Duration      int64       `json:"duration"`
		Location      int64       `json:"location"`
		Overview      string      `json:"overview"`
		Activities    []Activity  `json:"activities"`
		Services      []Service   `json:"services"`
		Itineraries   []Itinerary `json:"itineraries"`
		Price         float64     `json:"price"`
		DepartureDate int64       `json:"departureDate"`
		Quantity      int64       `json:"quantity"`
		Remain        int64       `json:"remain"`
		Status        int64       `json:"status"`
	}

	Activity {
		ID     int64  `json:"id"`
		Title  string `json:"title"`
		Detail string `json:"detail"`
	}

	Service {
		ID     int64  `json:"id"`
		Title  string `json:"title"`
		Detail string `json:"detail"`
	}

	Itinerary {
		ID          int64  `json:"id"`
		Name        string `json:"name"`
		Description string `json:"description"`
	}

	Order {
		ID            int64   `json:"id"`
		Code          string  `json:"code"`
		TourID        int64   `json:"tourID"`
		Tour   Tour `json:"tour"`
		TourName      string  `json:"tourName"`
		UserID        int64   `json:"userID"`
		FullName      string  `json:"fullName"`
		Email         string  `json:"email"`
		Phone         string  `json:"phone"`
		Status        int64   `json:"status"`
		Quantity      int64   `json:"quantity"`
		TotalPrice    float64 `json:"totalPrice"`
		PaymentStatus int64   `json:"paymentStatus"`
		CreateDate    int64   `json:"createDate"`
	}

	Payment {
		ID          int64   `json:"id"`
		OrderID     int64   `json:"orderID"`
		OrderCode   string  `json:"orderCode"`
		Method      int64   `json:"method"`
		PaymentDate int64   `json:"paymentDate"`
		Amount      float64 `json:"amount"`
		Status      int64   `json:"status"`
		Url         string  `json:"url"`
	}
)

// API
type (
	LoginReq {
		Email    string `form:"email"`    // user_name
		Password string `form:"password"` //  password
	}
	LoginRes {
		Result Result `json:"result"`
		Token  string `json:"token"` // jwt token for api
		User   User   `json:"user"`  // Account info
	}

	RegisterReq {
		Fullname string `form:"fullname"`
		Email    string `form:"email"`
		Password string `form:"password"`
	}
	RegisterRes {
		Result Result `json:"result"`
		Token  string `json:"token"` // jwt token for api
		User   User   `json:"user"`  // Account info
	}

	SendMessageReq {
	}
	SendMessageRes {
	}

	SearchTourReq {
		Location      int64 `form:"location, optional"`
		DepartureDate int64 `form:"departureDate, optional"`
		Limit         int64 `form:"limit, optional"`
		Offset        int64 `form:"offset, optional"`
	}
	SearchTourRes {
		Tours  []Tour `json:"tours"`
		Total  int64  `json:"total"`
		Result Result `json:"result"`
	}

	TourDetailReq {
		TourID int64 `path:"tourID"`
	}
	TourDetailRes {
		Tour   Tour   `json:"tour"`
		Result Result `json:"result"`
	}
)

@server (
	prefix: /
)
service main-api {
	@doc (
		summary: "User Login"
	)
	@handler Login
	post /login (LoginReq) returns (LoginRes)

	@doc (
		summary: "User Register"
	)
	@handler Register
	post /register (RegisterReq) returns (RegisterRes)

	@doc (
		summary: "Send Message"
	)
	@handler SendMessage
	post /message (SendMessageReq) returns (SendMessageRes)

	@doc (
		summary: "Search Tour"
	)
	@handler SearchTour
	get /tour/filter (SearchTourReq) returns (SearchTourRes)

	@doc (
		summary: "Tour Detail"
	)
	@handler TourDetail
	get /tour/:tourID (TourDetailReq) returns (TourDetailRes)
}

type (
	UpdateUserReq {
	}
	UpdateUserRes {
	}

	UploadFileReq {
	}
	UploadFileRes {
		Result Result `json:"result"`
		Url    string `json:"url"`
	}

	CreateTourReq {
		Image         string  `form:"image"`
		Name          string  `form:"name"`
		Description   string  `form:"description"`
		Duration      int64   `form:"duration"`
		Location      int64   `form:"location"`
		Overview      string  `form:"overview"`
		Activities    string  `form:"activities"`
		Services      string  `form:"services"`
		Itinerary     string  `form:"itinerary"`
		Price         float64 `form:"price"`
		Seats         int64   `form:"seats"`
		DepartureDate int64   `form:"departureDate"`
	}
	CreateTourRes {
		Result Result `json:"result"`
	}

	UpdateTourReq {
		TourID        int64   `path:"tourID"`
		Image         string  `form:"image"`
		Name          string  `form:"name"`
		Description   string  `form:"description"`
		Duration      int64   `form:"duration"`
		Location      int64   `form:"location"`
		Overview      string  `form:"overview"`
		Activities    string  `form:"activities"`
		Services      string  `form:"services"`
		Itinerary     string  `form:"itinerary"`
		Price         float64 `form:"price"`
		Seats         int64   `form:"seats"`
		DepartureDate int64   `form:"departureDate"`
	}
	UpdateTourRes {
		Result Result `json:"result"`
	}

	CreateOrderReq {
		TourID   int64  `form:"tourID"`
		UserID   int64  `form:"userID,optional"`
		Fullname string `form:"fullname"`
		Email    string `form:"email"`
		Phone    string `form:"phone"`
		Seats    int64  `form:"seats"`
	}
	CreateOrderRes {
		Result Result `json:"result"`
	}

	GetOrderReq {
		OrderID int64 `path:"orderID"`
	}
	GetOrderRes {
		Result   Result    `json:"result"`
		Order    Order     `json:"order"`
		Tour     Tour      `json:"tour"`
		Payments []Payment `json:"payments"`
	}

	FilterOrderReq {
		UserID int64 `form:"userID,optional"`
		TourID int64 `form:"tourID,optional"`
		Status int64 `form:"status,optional"`
		Limit  int64 `form:"limit,optional"`
		Offset int64 `form:"offset,optional"`
	}
	FilterOrderRes {
		Result Result  `json:"result"`
		Orders []Order `json:"orders"`
		Total  int64   `json:"total"`
	}

	UpdateOrderStatusReq {
		OrderID int64 `path:"orderID"`
		Status  int64 `form:"status"`
	}
	UpdateOrderStatusRes {
		Result Result `json:"result"`
	}

	UpdateOrderReq {
		OrderID  int64  `path:"orderID"`
		TourID   int64  `form:"tourID"`
		UserID   int64  `form:"userID"`
		Fullname string `form:"fullname"`
		Email    string `form:"email"`
		Phone    string `form:"phone"`
		Seats    int64  `form:"seats"`
	}
	UpdateOrderRes {
		Result Result `json:"result"`
	}

	CreatePaymentReq {
		OrderID     int64   `form:"orderID"`
		Method      int64   `form:"method"`
		PaymentDate int64   `form:"paymentDate"`
		Amount      float64 `form:"amount"`
		Url         string  `form:"url"`
		Status      int64   `form:"status"`
	}
	CreatePaymentRes {
		Result Result `json:"result"`
	}

	FilterPaymentReq {
		OrderID int64 `form:"orderID"`
		UserID  int64 `form:"userID"`
		Status  int64 `form:"status"`
		Limit   int64 `form:"limit"`
		Offset  int64 `form:"offset"`
	}
	FilterPaymentRes {
		Result   Result    `json:"result"`
		Payments []Payment `json:"payments"`
		Total    int64     `json:"total"`
	}

	UpdatePaymentReq {
		PaymentID     int64  `path:"paymentID"`
		OrderID       int64  `form:"orderID"`
		OrderCode     string `form:"orderCode"`
		PaymentMethod string `form:"paymentMethod"`
		Amount        int64  `form:"amount"`
	}
	UpdatePaymentRes {
		Result Result `json:"result"`
	}

	DeletePaymentReq {
		PaymentID int64 `path:"paymentID"`
	}
	DeletePaymentRes {
		Result Result `json:"result"`
	}

	UpdatePaymentStatusReq {
		PaymentID int64 `path:"paymentID"`
		Status    int64 `form:"status"`
	}
	UpdatePaymentStatusRes {
		Result Result `json:"result"`
	}
)
@server (
	jwt:        Auth
	middleware: UserTokenMiddleware
	prefix:     /
)
service main-api {
	@doc (
		summary: "Update User Info"
	)
	@handler UpdateUser
	put /user/:userID (UpdateUserReq) returns (UpdateUserRes)

	@doc (
		summary: "Create Tour"
	)
	@handler CreateTour
	post /tour (CreateTourReq) returns (CreateTourRes)

	@doc (
		summary: "Update Tour"
	)
	@handler UpdateTour
	put /tour/:tourID (UpdateTourReq) returns (UpdateTourRes)

	@doc(
		summary: "Upload File"
	)
	@handler UploadFile
	post /upload (UploadFileReq) returns (UploadFileRes)

	@doc (
		summary: "Create Order"
	)
	@handler CreateOrder
	post /order (CreateOrderReq) returns (CreateOrderRes)

	@doc (
		summary: "Get Order"
	)
	@handler GetOrder
	get /order/:orderID (GetOrderReq) returns (GetOrderRes)

	@doc (
		summary: "Filter Order"
	)
	@handler FilterOrder
	get /order/filter (FilterOrderReq) returns (FilterOrderRes)

	@doc (
		summary: "Update Order Status"
	)
	@handler UpdateOrderStatus
	put /order/:orderID/status (UpdateOrderStatusReq) returns (UpdateOrderStatusRes)

	@doc (
		summary: "Update Order"
	)
	@handler UpdateOrder
	put /order/:orderID (UpdateOrderReq) returns (UpdateOrderRes)

	@doc(
		summary: "Create Payment"
	)
	@handler CreatePayment
	post /payment (CreatePaymentReq) returns (CreatePaymentRes)

	@doc(
		summary: "Filter Payment"
	)
	@handler FilterPayment
	get /payment/filter (FilterPaymentReq) returns (FilterPaymentRes)

	@doc(
		summary: "Update Payment"
	)
	@handler UpdatePayment
	put /payment/:paymentID (UpdatePaymentReq) returns (UpdatePaymentRes)

	@doc(
		summary: "Delete Payment"
	)
	@handler DeletePayment
	delete /payment/:paymentID (DeletePaymentReq) returns (DeletePaymentRes)

	@doc (
		summary: "Update Payment Status"
	)
	@handler UpdatePaymentStatus
	put /payment/:paymentID/status (UpdatePaymentStatusReq) returns (UpdatePaymentStatusRes)
}