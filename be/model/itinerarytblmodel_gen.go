// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	itineraryTblFieldNames          = builder.RawFieldNames(&ItineraryTbl{})
	itineraryTblRows                = strings.Join(itineraryTblFieldNames, ",")
	itineraryTblRowsExpectAutoSet   = strings.Join(stringx.Remove(itineraryTblFieldNames), ",")
	itineraryTblRowsWithPlaceHolder = strings.Join(stringx.Remove(itineraryTblFieldNames, "`id`"), "=?,") + "=?"
)

type (
	itineraryTblModel interface {
		Insert(ctx context.Context, data *ItineraryTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ItineraryTbl, error)
		Update(ctx context.Context, data *ItineraryTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultItineraryTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ItineraryTbl struct {
		Id          int64          `db:"id"`
		TourId      sql.NullInt64  `db:"tour_id"`
		Name        string         `db:"name"`
		Description sql.NullString `db:"description"`
		CreatedAt   sql.NullInt64  `db:"created_at"`
		UpdatedAt   sql.NullInt64  `db:"updated_at"`
	}
)

func newItineraryTblModel(conn sqlx.SqlConn) *defaultItineraryTblModel {
	return &defaultItineraryTblModel{
		conn:  conn,
		table: "`itinerary_tbl`",
	}
}

func (m *defaultItineraryTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultItineraryTblModel) FindOne(ctx context.Context, id int64) (*ItineraryTbl, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", itineraryTblRows, m.table)
	var resp ItineraryTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultItineraryTblModel) Insert(ctx context.Context, data *ItineraryTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, itineraryTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.TourId, data.Name, data.Description, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultItineraryTblModel) Update(ctx context.Context, data *ItineraryTbl) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, itineraryTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.TourId, data.Name, data.Description, data.CreatedAt, data.UpdatedAt, data.Id)
	return err
}

func (m *defaultItineraryTblModel) tableName() string {
	return m.table
}
