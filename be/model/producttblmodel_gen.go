// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productTblFieldNames          = builder.RawFieldNames(&ProductTbl{})
	productTblRows                = strings.Join(productTblFieldNames, ",")
	productTblRowsExpectAutoSet   = strings.Join(stringx.Remove(productTblFieldNames), ",")
	productTblRowsWithPlaceHolder = strings.Join(stringx.Remove(productTblFieldNames, "`id`"), "=?,") + "=?"
)

type (
	productTblModel interface {
		Insert(ctx context.Context, data *ProductTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProductTbl, error)
		Update(ctx context.Context, data *ProductTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ProductTbl struct {
		Id          int64          `db:"id"`
		Name        string         `db:"name"`
		Description sql.NullString `db:"description"`
		Price       float64        `db:"price"`
		Quantity    int64          `db:"quantity"`
		Remain      int64          `db:"remain"`
		TimeStart   sql.NullInt64  `db:"time_start"`
		CreatedAt   sql.NullInt64  `db:"created_at"`
		UpdatedAt   sql.NullInt64  `db:"updated_at"`
	}
)

func newProductTblModel(conn sqlx.SqlConn) *defaultProductTblModel {
	return &defaultProductTblModel{
		conn:  conn,
		table: "`product_tbl`",
	}
}

func (m *defaultProductTblModel) withSession(session sqlx.Session) *defaultProductTblModel {
	return &defaultProductTblModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`product_tbl`",
	}
}

func (m *defaultProductTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultProductTblModel) FindOne(ctx context.Context, id int64) (*ProductTbl, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productTblRows, m.table)
	var resp ProductTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductTblModel) Insert(ctx context.Context, data *ProductTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, productTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.Description, data.Price, data.Quantity, data.Remain, data.TimeStart, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultProductTblModel) Update(ctx context.Context, data *ProductTbl) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Description, data.Price, data.Quantity, data.Remain, data.TimeStart, data.CreatedAt, data.UpdatedAt, data.Id)
	return err
}

func (m *defaultProductTblModel) tableName() string {
	return m.table
}
