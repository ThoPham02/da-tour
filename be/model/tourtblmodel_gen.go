// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tourTblFieldNames          = builder.RawFieldNames(&TourTbl{})
	tourTblRows                = strings.Join(tourTblFieldNames, ",")
	tourTblRowsExpectAutoSet   = strings.Join(stringx.Remove(tourTblFieldNames), ",")
	tourTblRowsWithPlaceHolder = strings.Join(stringx.Remove(tourTblFieldNames, "`id`"), "=?,") + "=?"
)

type (
	tourTblModel interface {
		Insert(ctx context.Context, data *TourTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TourTbl, error)
		Update(ctx context.Context, data *TourTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTourTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TourTbl struct {
		Id            int64          `db:"id"`
		Image         string         `db:"image"`
		Name          string         `db:"name"`
		Description   sql.NullString `db:"description"`
		Duration      int64          `db:"duration"`
		Location      int64          `db:"location"`
		Overview      sql.NullString `db:"overview"`
		Price         float64        `db:"price"`
		Quantity      int64          `db:"quantity"`
		Remain        int64          `db:"remain"`
		DepartureDate sql.NullInt64  `db:"departure_date"`
		Status        int64          `db:"status"`
		CreatedAt     sql.NullInt64  `db:"created_at"`
		UpdatedAt     sql.NullInt64  `db:"updated_at"`
	}
)

func newTourTblModel(conn sqlx.SqlConn) *defaultTourTblModel {
	return &defaultTourTblModel{
		conn:  conn,
		table: "`tour_tbl`",
	}
}

func (m *defaultTourTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTourTblModel) FindOne(ctx context.Context, id int64) (*TourTbl, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tourTblRows, m.table)
	var resp TourTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTourTblModel) Insert(ctx context.Context, data *TourTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tourTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Image, data.Name, data.Description, data.Duration, data.Location, data.Overview, data.Price, data.Quantity, data.Remain, data.DepartureDate, data.Status, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultTourTblModel) Update(ctx context.Context, data *TourTbl) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tourTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Image, data.Name, data.Description, data.Duration, data.Location, data.Overview, data.Price, data.Quantity, data.Remain, data.DepartureDate, data.Status, data.CreatedAt, data.UpdatedAt, data.Id)
	return err
}

func (m *defaultTourTblModel) tableName() string {
	return m.table
}
